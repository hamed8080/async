{
  "abstract" : [
    {
      "text" : "Create and connect to async server.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Async\/documentation\/Async"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Async\/documentation\/Async\/GettingStarted"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "Async"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Getting Started"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "With the help of the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Async\/documentation\/Async",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " class, you could connect to the async server and the rest of the magic will happen automatically.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Create-Configuration",
          "level" : 3,
          "text" : "Create Configuration",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "For connecting to the async server you must first of all pass a configuration to it, like the following code:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let asyncConfig = AsyncConfig(socketAddress: \"192.168.1.1\", serverName: \"ServerName\", appId: \"PodChat\")",
            "let asyncClient = Async(config: asyncConfig, delegate: self)  "
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Connecting-to-Async",
          "level" : 3,
          "text" : "Connecting to Async",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Connecting to async server is not happening automatically you must tell it to connect, like the code the below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "asyncClient.createSocket()"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Connecting-successfully",
          "level" : 3,
          "text" : "Connecting successfully",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "If everything goes well you should receive a ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncSocketState\/asyncReady",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " state in the ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncDelegate\/asyncStateChanged(asyncState:error:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " protocol.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public func asyncStateChanged(asyncState: AsyncSocketState, error: AsyncError?) {",
            "    if asyncState == .ASYNC_READY{",
            "        \/\/doing your stuff.",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Receiving-messages",
          "level" : 3,
          "text" : "Receiving messages",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "Whenever an event of the type of message arrives you can handle it with ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncDelegate\/asyncMessage(asyncMessage:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " delegate method.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public func asyncMessage(asyncMessage: AsyncMessage){",
            "    print(asyncMessage)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Send-a-message",
          "level" : 3,
          "text" : "Send a message",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "For sending a message make sure the async state is in ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncSocketState\/asyncReady",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " state unless it async will queued the message and after connecting to the server it will send automatically.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "if asyncClient.asyncSateModel == AsyncSocketState.ASYNC_READY{",
            "    asyncClient.send(type: AsyncMessageTypes.MESSAGE, data: \"Hello World!\".data(using:.utf8)!)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Debugging",
          "level" : 3,
          "text" : "Debugging",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "For debugging a problem you should pass true in the configuration initializer like this, and it will print the logs to the console:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "let asyncConfig = AsyncConfig(socketAddress: \"192.168.1.1\", serverName: \"ServerName\", appId: \"PodChat\", isDebuggingLogEnabled: isDebuggingAsyncEnable)"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/Async\/documentation\/Async\/Async"
      ],
      "title" : "Essentials"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/async\/gettingstarted"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Async/documentation/Async": {
  "abstract" : [
    {
      "text" : "With Async SDK you could connect to the async server without managing the socket state.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Async\/documentation\/Async",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Async",
  "type" : "topic",
  "url" : "\/documentation\/async"
},
"doc://Async/documentation/Async/Async": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "Async"
    }
  ],
  "identifier" : "doc:\/\/Async\/documentation\/Async\/Async",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "Async"
    }
  ],
  "role" : "symbol",
  "title" : "Async",
  "type" : "topic",
  "url" : "\/documentation\/async\/async"
},
"doc://Async/documentation/Async/AsyncDelegate/asyncMessage(asyncMessage:)": {
  "abstract" : [
    {
      "text" : "When a new message arrive it called.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "asyncMessage"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "asyncMessage"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Async0A7MessageV",
      "text" : "AsyncMessage"
    },
    {
      "kind" : "text",
      "text" : ")"
    }
  ],
  "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncDelegate\/asyncMessage(asyncMessage:)",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "asyncMessage(asyncMessage:)",
  "type" : "topic",
  "url" : "\/documentation\/async\/asyncdelegate\/asyncmessage(asyncmessage:)"
},
"doc://Async/documentation/Async/AsyncDelegate/asyncStateChanged(asyncState:error:)": {
  "abstract" : [
    {
      "text" : "It will be called whenever the socket state change.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "asyncStateChanged"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "asyncState"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Async0A11SocketStateO",
      "text" : "AsyncSocketState"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "error"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5Async0A5ErrorV",
      "text" : "AsyncError"
    },
    {
      "kind" : "text",
      "text" : "?)"
    }
  ],
  "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncDelegate\/asyncStateChanged(asyncState:error:)",
  "kind" : "symbol",
  "required" : true,
  "role" : "symbol",
  "title" : "asyncStateChanged(asyncState:error:)",
  "type" : "topic",
  "url" : "\/documentation\/async\/asyncdelegate\/asyncstatechanged(asyncstate:error:)"
},
"doc://Async/documentation/Async/AsyncSocketState/asyncReady": {
  "abstract" : [
    {
      "text" : "Async is ready to use.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "case"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "asyncReady"
    }
  ],
  "identifier" : "doc:\/\/Async\/documentation\/Async\/AsyncSocketState\/asyncReady",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "AsyncSocketState.asyncReady",
  "type" : "topic",
  "url" : "\/documentation\/async\/asyncsocketstate\/asyncready"
}
}
}